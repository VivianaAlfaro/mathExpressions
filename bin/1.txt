import java.util.ArrayList;
import java.util.List;

public class CustomQueue {
    private List<String> elements;
    
    public CustomQueue() {
        elements = new ArrayList<>();
    }
    
    public void enqueue(String item) {
        elements.add(item);
    }
    
    public String dequeue() {
        if (!isEmpty()) {
            String item = elements.get(0);
            elements.remove(0);
            return item;
        }
        return null; // Return null for an empty queue
    }
    
    public boolean isEmpty() {
        return elements.isEmpty();
    }
    
    public int size() {
        return elements.size();
    }

    public static String infixToPostfix(String infix) {
        StringBuilder postfix = new StringBuilder();
        CustomStack stack = new CustomStack();

        for (char c : infix.toCharArray()) {
            if (Character.isDigit(c)) {
                postfix.append(c);
            } else if (c == ' ') {
                continue;
            } else if (c == '+' || c == '-' || c == '*' || c == '/') {
                while (!stack.isEmpty() && getPrecedence(stack.peek()) >= getPrecedence(c)) {
                    postfix.append(" ").append(stack.pop());
                }
                stack.push(c);
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(" ").append(stack.pop());
                }
                stack.pop();
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(" ").append(stack.pop());
        }

        return postfix.toString();
    }

    public static CustomQueue postfixToQueue(String postfix) {
        CustomQueue queue = new CustomQueue();
        String[] tokens = postfix.split(" ");

        for (String token : tokens) {
            queue.enqueue(token);
        }

        return queue;
    }

    private static int getPrecedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
        }
        return 0; // Default for other characters
    }
}

class CustomStack {
    private List<Character> elements;

    public CustomStack() {
        elements = new ArrayList<>();
    }

    public void push(char item) {
        elements.add(item);
    }

    public char pop() {
        if (!isEmpty()) {
            char item = elements.get(elements.size() - 1);
            elements.remove(elements.size() - 1);
            return item;
        }
        return '\0'; // Return '\0' for an empty stack
    }

    public char peek() {
        if (!isEmpty()) {
            return elements.get(elements.size() - 1);
        }
        return '\0'; // Return '\0' for an empty stack
    }

    public boolean isEmpty() {
        return elements.isEmpty();
    }
}